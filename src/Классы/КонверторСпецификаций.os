#Использовать fs
#Использовать logos
#Использовать v8runner
#Использовать v8find

Перем Лог Экспорт;

Перем ИмяФайлаСпецификации Экспорт;
Перем ИмяФайлаРасширения Экспорт;
Перем ИмяРасширения Экспорт;
Перем СпецификацияПостман Экспорт;
Перем КаталогВременныхФайлов Экспорт;
Перем ВерсияПлатформы Экспорт;

Перем Конфигуратор;
Перем ИмяВременнойБазы;
Перем КаталогСпецификации;
Перем КаталогРасширения;
Перем КаталогИсходников;

Перем ВНУТР_ИмяФайлаСпецификации;
Перем ВНУТР_ИмяФайлаРасширения;

Перем ВНУТР_Пути;
Перем ВНУТР_ПоддерживаемыеМетоды;
Перем ВНУТР_ВходныеПараметры;
Перем ВНУТР_ВыходынеПараметры;

Процедура Инициализация()

	ФайлСпецификации = Новый Файл(ИмяФайлаСпецификации);
	
	Если Не ФайлСпецификации.Существует() Тогда
		ТекстОшибки = СтрШаблон("Файл не существует по пути %1", ИмяФайлаСпецификации);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КаталогВременныхФайлов) Тогда
		КаталогВременныхФайлов = ПолучитьИмяВременногоФайла("tmp");		 // BSLLS:MissingTemporaryFileDeletion-off
		ФС.ОбеспечитьКаталог(КаталогВременныхФайлов);		 
		Лог.Информация(СтрШаблон("Подготовлен каталог %1", КаталогВременныхФайлов))
	КонецЕсли;

	ФС.ОбеспечитьПустойКаталог(КаталогВременныхФайлов);
	
	ИмяВременнойБазы = ОбъединитьПути(КаталогВременныхФайлов, "database");
	ФС.ОбеспечитьКаталог(ИмяВременнойБазы);		 

	КаталогСпецификации = ОбъединитьПути(КаталогВременныхФайлов, "specification");
	ФС.ОбеспечитьКаталог(КаталогСпецификации);		 

	КаталогРасширения = ОбъединитьПути(КаталогВременныхФайлов, "result");
	ФС.ОбеспечитьКаталог(КаталогРасширения);

	КаталогИсходников = ОбъединитьПути(КаталогВременныхФайлов, "src");
	ФС.ОбеспечитьКаталог(КаталогИсходников);

	ВНУТР_ИмяФайлаРасширения = ОбъединитьПути(КаталогРасширения, "extension.cfe");

	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда

		ПоискПлатформы = Новый МенеджерПлатформы1С();	
		
		СисИнфо = Новый СистемнаяИнформация;
		ЭтоWindows = Найти(НРег(СисИнфо.ВерсияОС), "windows") > 0;
		Это64ОС = СисИнфо.Это64БитнаяОперационнаяСистема;
		Лог.Отладка(СисИнфо.ВерсияОС);
		Если Не ЭтоWindows Тогда
			ПоискПлатформы.ДобавитьКаталоГПоиска(ОбъединитьПути("/opt","1C"), РазрядностьПлатформы.x86); 
			Если Это64ОС Тогда
				ПоискПлатформы.ДобавитьКаталоГПоиска(ОбъединитьПути("/opt","1C"), РазрядностьПлатформы.x64); 
			КонецЕсли;
		КонецЕсли;

		ПутьКПлатформе = ПоискПлатформы.ПутьКПредприятию(ВерсияПлатформы, РазрядностьПлатформы.x64);

		Если ЗначениеЗаполнено(ПутьКПлатформе) Тогда
			Конфигуратор.ПутьКПлатформе1С(ПутьКПлатформе);
		Иначе
			Лог.Отладка(СтрШаблон("Не найдена платформа указанной версии %1. Будет использована платформа по-умолчанию", ВерсияПлатформы));
		КонецЕсли;
	КонецЕсли;

	Лог.Информация(СтрШаблон("Создаю временную базу %1", ИмяВременнойБазы));
	
	Конфигуратор.СоздатьФайловуюБазу(ИмяВременнойБазы);
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");

	ВНУТР_Пути = Новый ТаблицаЗначений();
	ВНУТР_Пути.Колонки.Добавить("Путь", ОписаниеСтрока);
	ВНУТР_Пути.Колонки.Добавить("ИдентифкаторОтбора", ОписаниеСтрока);
	ВНУТР_Пути.Колонки.Добавить("НаименованиеШаблона", ОписаниеСтрока);

	ВНУТР_ПоддерживаемыеМетоды = Новый ТаблицаЗначений();
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("ИдентифкаторОтбора", ОписаниеСтрока);
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("ИмяМетода", ОписаниеСтрока);
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("Идентификатор", ОписаниеСтрока);
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("НаименованиеМетода", ОписаниеСтрока);
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("СинонимМетода", ОписаниеСтрока);
	ВНУТР_ПоддерживаемыеМетоды.Колонки.Добавить("КомментарийМетода", ОписаниеСтрока);

	ВНУТР_ВходныеПараметры = Новый ТаблицаЗначений();
	ВНУТР_ВходныеПараметры.Колонки.Добавить("ИдентифкаторОтбора", ОписаниеСтрока);
	ВНУТР_ВходныеПараметры.Колонки.Добавить("Параметр", ОписаниеСтрока);
	ВНУТР_ВходныеПараметры.Колонки.Добавить("ТипПараметра", ОписаниеСтрока);
	ВНУТР_ВходныеПараметры.Колонки.Добавить("Описание", ОписаниеСтрока);

	ВНУТР_ВыходынеПараметры = Новый ТаблицаЗначений();
	ВНУТР_ВыходынеПараметры.Колонки.Добавить("ИдентифкаторОтбора", ОписаниеСтрока);
	ВНУТР_ВыходынеПараметры.Колонки.Добавить("КодВозврата", ОписаниеСтрока);

	ИмяРасширения = СтрЗаменить(ИмяРасширения, "_", "");

	Если ЗначениеЗаполнено(СпецификацияПостман) Тогда
		Если НРег(СпецификацияПостман) = "true" 
			ИЛИ НРег(СпецификацияПостман) = "истина" Тогда
			СпецификацияПостман = Истина;
		Иначе
			СпецификацияПостман = Ложь;
		КонецЕсли; 
	Иначе
		СпецификацияПостман = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура СкопироватьВходынеФайлы()
	
	ФайлСпецификации = Новый Файл(ИмяФайлаСпецификации);
	
	ВНУТР_ИмяФайлаСпецификации = ОбъединитьПути(КаталогСпецификации, ФайлСпецификации.Имя);
	
	КопироватьФайл(ИмяФайлаСпецификации, ВНУТР_ИмяФайлаСпецификации);	

КонецПроцедуры

Процедура СкопироватьИсходящиеФайлы()
	
	КопироватьФайл(ВНУТР_ИмяФайлаРасширения, ИмяФайлаРасширения);	

КонецПроцедуры

Процедура ВыполнитьПреобразованиеСпецификации() Экспорт
	
	Лог.Информация(СтрШаблон("Начинаю выполнять преобразование"));

	Инициализация();

	СкопироватьВходынеФайлы();

	Если СпецификацияПостман = Истина Тогда
		ВыполнитьТрансформациюИзКоллекцииПостман();
	КонецЕсли;

	ВыполнитьЧтениеСпецификации();

	ВыполнитьФормированиеИсходников1С();	

	ВыполнитьСборкуИсходников();

	СкопироватьИсходящиеФайлы();

КонецПроцедуры

Процедура ВыполнитьТрансформациюИзКоллекцииПостман()

	Лог.Информация(СтрШаблон("Начинаю преобразования из коллекции Postman в OAS"));

	ПутьКТрансформатору = ФС.ПолныйПуть(".\bin\postman2openapi\postman2openapi.exe");
	
	ФайлТрансформатора = Новый Файл(ПутьКТрансформатору);

	Если НЕ ФайлТрансформатора.Существует() Тогда
		ТекстОшибки = СтрШаблон("Файл трансформатора не существует по пути %1", ПутьКТрансформатору);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ВходнойПуть = ВНУТР_ИмяФайлаСпецификации;
	Результат = ОбъединитьПути(КаталогСпецификации, "oas.json"); 

	СтрокаЗапуска = ОбернутьВКавычки(ПутьКТрансформатору) 
				+ " -o json"
				+ " " + ОбернутьВКавычки(ВходнойПуть) 
				+ " > " + ОбернутьВКавычки(Результат); 

	Команда = Новый Команда();
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);

	КодВозврата = Команда.Исполнить();

	Если НЕ КодВозврата = 0 Тогда
		Успех = Ложь;
		ТекстОшибки = Команда.ПолучитьВывод();
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ФайлСпецификации = Новый Файл(Результат);
	
	Если Не ФайлСпецификации.Существует() Тогда
		ТекстОшибки = СтрШаблон("Не удалось преобразовать коллекцию в файл %1", Результат);
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ВНУТР_ИмяФайлаСпецификации = Результат;

КонецПроцедуры

Процедура ВыполнитьЧтениеСпецификации()

	Лог.Информация(СтрШаблон("Приступаю к чтению спецификации"));

	ЧитательСпецификации_OAS3 = Новый ЧитательСпецификации_OAS3();
	ЧитательСпецификации_OAS3.Лог = Лог;
	ЧитательСпецификации_OAS3.Пути = ВНУТР_Пути;
	ЧитательСпецификации_OAS3.ПоддерживаемыеМетоды = ВНУТР_ПоддерживаемыеМетоды;
	ЧитательСпецификации_OAS3.ВыходынеПараметры = ВНУТР_ВыходынеПараметры;
	ЧитательСпецификации_OAS3.ВходныеПараметры = ВНУТР_ВходныеПараметры;
	ЧитательСпецификации_OAS3.ФайлСпецификации = ВНУТР_ИмяФайлаСпецификации;
	ЧитательСпецификации_OAS3.ВыполнитьЧтениеСпецификации();
	
КонецПроцедуры

Процедура ВыполнитьФормированиеИсходников1С()

	Лог.Информация(СтрШаблон("Собираю исходники по спецификации"));

	РучнойСоздательИсходников = Новый РучнойСоздательИсходников();
	РучнойСоздательИсходников.Лог = Лог;
	РучнойСоздательИсходников.ПутьККаталогу = КаталогИсходников;
	РучнойСоздательИсходников.ИмяРасширения = ИмяРасширения;
	РучнойСоздательИсходников.Пути = ВНУТР_Пути;
	РучнойСоздательИсходников.ПоддерживаемыеМетоды = ВНУТР_ПоддерживаемыеМетоды;
	РучнойСоздательИсходников.ВыходынеПараметры = ВНУТР_ВыходынеПараметры;
	РучнойСоздательИсходников.ВходныеПараметры = ВНУТР_ВходныеПараметры;

	РучнойСоздательИсходников.СформироватьИсходникиРасширения();

КонецПроцедуры

Процедура ВыполнитьСборкуИсходников()

	//Загрузка исходников
	Лог.Информация(СтрШаблон("Загружаю исходные файлы в базу"));

	Конфигуратор.УстановитьКонтекст("/F" + ИмяВременнойБазы, "", "");

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	
	ПараметрыЗапуска.Добавить(СтрШаблон("/LoadConfigFromFiles ""%1"" -Extension %2", КаталогИсходников, ИмяРасширения)); 
	
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//Обновление результатов
	Лог.Информация(СтрШаблон("Обновляю базу после загрузки исходников"));

	Конфигуратор.УстановитьКонтекст("/F" + ИмяВременнойБазы, "", "");

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	
	ПараметрыЗапуска.Добавить(СтрШаблон("/UpdateDBCfg -Extension %1", ИмяРасширения)); 

	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	//Выгрузка результатов

	Лог.Информация(СтрШаблон("Выгружаю приложение в файл"));

	Конфигуратор.УстановитьКонтекст("/F" + ИмяВременнойБазы, "", "");

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	
	ПараметрыЗапуска.Добавить(СтрШаблон("/DumpDBCfg ""%1"", -Extension %2", ВНУТР_ИмяФайлаРасширения, ИмяРасширения)); 

	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Конфигуратор = Новый УправлениеКонфигуратором();

Лог = Логирование.ПолучитьЛог("oscript.app.anti_swagger");